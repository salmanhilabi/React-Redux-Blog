{"version":3,"sources":["store/reducers/blogReducer.js","store/reducers/rootReducer.js","store/store.js","store/actions/actionType.js","components/editPageComponents/edit.js","components/homePageComponents/postForm.js","components/homePageComponents/single-post/post.js","components/homePageComponents/allPost.js","components/blogPostWrapper.js","App.js","index.js"],"names":["initialState","BlogReducer","state","action","type","concat","payload","filter","post","id","map","title","author","message","image","rootReducer","combineReducers","blogReducer","persistConfig","key","storage","whitelist","pReducer","persistReducer","store","createStore","persistor","persistStore","addToList","data","updatePost","EditPage","isDataExist","file","imageUrl","updated","getImage","e","preventDefault","reader","FileReader","target","files","onloadend","setState","result","readAsDataURL","handleValues","value","handleEdit","Date","props","dispatch","location","removeImage","this","history","push","className","to","onSubmit","required","onChange","placeholder","rows","cols","ref","Component","connect","PostForm","newPost","handleSubmit","Post","img","day","month","year","d","getDate","getMonth","getFullYear","console","log","alt","src","pathname","onClick","AllPost","posts","length","BlogPostWrapper","App","loading","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"uRAAMA,EAAe,GA0BNC,EAxBK,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACpD,OAAQA,EAAOC,MACb,IAAK,WACH,OAAOF,EAAMG,OAAO,CAACF,EAAOG,UAC9B,IAAK,cACH,OAAOJ,EAAMK,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAON,EAAOM,MAEjD,IAAK,SACH,OAAOP,EAAMQ,KAAI,SAAAF,GACf,OAAIA,EAAKC,KAAON,EAAOM,GAEd,eACFD,EADL,CAEEG,MAAOR,EAAOG,QAAQK,MACtBC,OAAQT,EAAOG,QAAQM,OACvBC,QAASV,EAAOG,QAAQO,QACxBC,MAAOX,EAAOG,QAAQQ,QAEZN,KAElB,QACE,OAAON,IChBEa,EAJKC,YAAgB,CAClCC,YAAahB,I,yBCCTiB,EAAgB,CACpBC,IAAK,OACLC,QAASA,IACTC,UAAW,CAAC,gBAGRC,EAAWC,YAAeL,EAAeH,GACzCS,EAAQC,YAAYH,GACpBI,EAAYC,YAAaH,G,wBCblBI,EAAY,SAACC,GACxB,MAAO,CACLzB,KAAM,WACNE,QAASuB,IAIAC,EAAa,SAACrB,EAAIoB,GAC7B,MAAO,CACLzB,KAAM,SACNK,KACAH,QAASuB,ICNPE,E,2MACJ7B,MAAQ,CACN8B,aAAa,EACbC,KAAM,GACNC,SAAU,GACVC,QAAS,GACTxB,MAAO,GACPC,OAAQ,GACRC,QAAS,I,EAkBXuB,SAAW,SAAAC,GACRA,EAAEC,iBAEF,IAAIC,EAAS,IAAIC,WACbP,EAAOI,EAAEI,OAAOC,MAAM,GAE1BH,EAAOI,UAAY,WACjB,EAAKC,SAAS,CACZX,KAAMA,EACNC,SAAUK,EAAOM,UAGrBN,EAAOO,cAAcb,I,EAGxBc,aAAe,SAAAV,GAEb,EAAKO,SAAL,eAAgBP,EAAEI,OAAOhC,GAAK4B,EAAEI,OAAOO,S,EAGzCC,WAAa,SAAAZ,GACXA,EAAEC,iBAEF,IAAMT,EAAO,CACXpB,GAAI,IAAIyC,KACRvC,MAAO,EAAKT,MAAMS,MAClBC,OAAQ,EAAKV,MAAMU,OACnBC,QAAS,EAAKX,MAAMW,QACpBC,MAAO,EAAKZ,MAAMgC,UAIpB,EAAKiB,MAAMC,SAAStB,EAAW,EAAKqB,MAAME,SAASxB,KAAKpB,GAAIoB,IAC5D,EAAKe,SAAS,CACZT,QAAS,mBACTxB,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTqB,SAAU,KAEZ,EAAKoB,YAAYN,MAAQ,M,mFAtDzB,GAAKO,KAAKJ,MAAME,SAASxB,KAEpB,CAAC,IACKrB,EAAS+C,KAAKJ,MAAME,SAASxB,KAA7BrB,KACR+C,KAAKX,SAAS,CACZZ,aAAa,EACbE,SAAU1B,EAAKM,MACfH,MAAOH,EAAKG,MACZC,OAAQJ,EAAKI,OACbC,QAASL,EAAKK,eARhB0C,KAAKJ,MAAMK,QAAQC,KAAK,O,+BAwDnB,IAAD,OAmDP,OACE,6BAlDI,EAAKvD,MAAM8B,YACN,yBAAKb,IAAK,EAAKgC,MAAME,SAASxB,KAAKpB,GAAIiD,UAAU,aACrD,yBAAKA,UAAU,wBACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,QACA,4BAAK,EAAKxD,MAAMiC,UAElB,0BAAMuB,UAAU,OAAOE,SAAU,EAAKX,YACpC,2BACEY,UAAQ,EACRzD,KAAK,OACLK,GAAG,QACHqD,SAAU,EAAKf,aACfgB,YAAY,mBACZf,MAAO,EAAK9C,MAAMS,QAEpB,6BACE,2BACEkD,UAAQ,EACRzD,KAAK,OACLK,GAAG,SACHqD,SAAU,EAAKf,aACfgB,YAAY,oBACZf,MAAO,EAAK9C,MAAMU,SAEtB,6BACA,8BACEiD,UAAQ,EACRG,KAAK,IACLvD,GAAG,UACHqD,SAAU,EAAKf,aACfkB,KAAK,KACLF,YAAY,aACZf,MAAO,EAAK9C,MAAMW,UAEpB,6BACA,2BACEgD,UAAQ,EACRzD,KAAK,OACL8D,IAAK,SAAApD,GAAK,OAAK,EAAKwC,YAAcxC,GAClCgD,SAAU,SAAAzB,GAAC,OAAI,EAAKD,SAASC,MAE/B,6BACA,4CAIG,oD,GArHO8B,aAgIRC,gBAAUrC,GCjInBsC,E,2MACJnE,MAAQ,CACN+B,KAAM,GACNC,SAAU,GACVoC,QAAS,GACT3D,MAAO,GACPC,OAAQ,GACRC,QAAS,I,EAGXuB,SAAW,SAAAC,GACTA,EAAEC,iBAEF,IAAIC,EAAS,IAAIC,WACbP,EAAOI,EAAEI,OAAOC,MAAM,GAE1BH,EAAOI,UAAY,WACjB,EAAKC,SAAS,CACZX,KAAMA,EACNC,SAAUK,EAAOM,UAGrBN,EAAOO,cAAcb,I,EAGvBc,aAAe,SAAAV,GAEb,EAAKO,SAAL,eAAgBP,EAAEI,OAAOhC,GAAK4B,EAAEI,OAAOO,S,EAGzCuB,aAAe,SAAAlC,GACbA,EAAEC,iBAEF,IAAMT,EAAO,CACXpB,GAAI,IAAIyC,KACRvC,MAAO,EAAKT,MAAMS,MAClBC,OAAQ,EAAKV,MAAMU,OACnBC,QAAS,EAAKX,MAAMW,QACpBC,MAAO,EAAKZ,MAAMgC,UAGpB,EAAKiB,MAAMC,SAASxB,EAAUC,IAC9B,EAAKe,SAAS,CACZ0B,QAAS,6BACTpC,SAAU,GACVvB,MAAO,GACPC,OAAQ,GACRC,QAAS,KAEX,EAAKyC,YAAYN,MAAQ,M,wEAGjB,IAAD,OACP,OACE,yBAAKU,UAAU,uBACb,wBAAIA,UAAU,kBAAkBH,KAAKrD,MAAMoE,SAC3C,wBAAIZ,UAAU,gBAAd,eACA,0BAAMA,UAAU,OAAOE,SAAUL,KAAKgB,cACpC,2BACEV,UAAQ,EACRzD,KAAK,OACLK,GAAG,QACHqD,SAAUP,KAAKR,aACfgB,YAAY,mBACZf,MAAOO,KAAKrD,MAAMS,QAEpB,6BACE,2BACEkD,UAAQ,EACRzD,KAAK,OACLK,GAAG,SACHqD,SAAUP,KAAKR,aACfgB,YAAY,oBACZf,MAAOO,KAAKrD,MAAMU,SAEtB,6BACA,8BACEiD,UAAQ,EACRG,KAAK,IACLvD,GAAG,UACHqD,SAAUP,KAAKR,aACfkB,KAAK,KACLF,YAAY,aACZf,MAAOO,KAAKrD,MAAMW,UAEpB,6BACA,2BACEgD,UAAQ,EACRzD,KAAK,OACLK,GAAG,QACHyD,IAAK,SAAApD,GAAK,OAAK,EAAKwC,YAAcxC,GAClCgD,SAAU,SAAAzB,GAAC,OAAI,EAAKD,SAASC,MAE/B,6BACA,8C,GA9Fa8B,aAqGRC,gBAAUC,GCpGnBG,E,2MACJtE,MAAQ,CACNuE,IAAK,KACLC,IAAK,KACLC,MAAO,KACPC,KAAM,M,mFAIN,IAEE,IAGIC,EAAI,IAAI3B,KAAKK,KAAKJ,MAAM3C,KAAKC,IACjC8C,KAAKX,SAAS,CAAC8B,IAAKG,EAAEC,UAAWH,MAJnB,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAC7D,OAAQ,SAAU,YAAa,UAAW,WAAY,YAGVE,EAAEE,YAAaH,KAAMC,EAAEG,gBACtE,MAAM3C,GACL4C,QAAQC,IAAI,QAAS7C,M,+BAIf,IAAD,OACP,OACE,yBAAKqB,UAAU,QACb,yBAAKyB,IAAI,WAAWzB,UAAU,WAAW0B,IAAK7B,KAAKJ,MAAM3C,KAAKM,QAC9D,yBAAK4C,UAAU,yBACb,uBAAGA,UAAU,aAAb,UAA6BH,KAAKrD,MAAMyE,MAAxC,YAAiDpB,KAAKrD,MAAMwE,IAA5D,YAAmEnB,KAAKrD,MAAM0E,OAC9E,uBAAGlB,UAAU,eAAb,aAAqC,8BAAOH,KAAKJ,MAAM3C,KAAKI,UAE9D,wBAAI8C,UAAU,cAAcH,KAAKJ,MAAM3C,KAAKG,OAC5C,uBAAG+C,UAAU,gBAAgBH,KAAKJ,MAAM3C,KAAKK,SAC7C,yBAAK6C,UAAU,mBACb,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAI,CAAC0B,SAAU,aAAcxD,KAAK,CAACrB,KAAM+C,KAAKJ,MAAM3C,KAAMC,GAAI8C,KAAKJ,MAAM3C,KAAKC,MAArG,QACA,4BAAQiD,UAAU,SAAS4B,QAAS,kBAAM,EAAKnC,MAAMC,SHtBtD,CACLhD,KAAM,cACNK,GGoB+E,EAAK0C,MAAM3C,KAAKC,OAAzF,gB,GAjCS0D,aAyCJC,gBAAUI,GC1CnBe,E,iLAEF,OACE,yBAAK7B,UAAU,kBAC4B,IAAxCH,KAAKJ,MAAMqC,MAAMvE,YAAYwE,OAC7B,6BACG,wBAAI/B,UAAU,mBAAd,6BAEFH,KAAKJ,MAAMqC,MAAMvE,YAAYP,KAAI,SAAAF,GAAI,OAC5B,OAATA,EAAgB,KACd,yBAAKW,IAAKX,EAAKC,IACb,kBAAC,EAAD,CAAMD,KAAMA,a,GAXJ2D,aAyBPC,eANS,SAAAlE,GACtB,MAAO,CACLsF,MAAOtF,KAIIkE,CAAyBmB,GCdzBG,E,iLATX,OACE,yBAAKhC,UAAU,uBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALsBS,a,QC4BfwB,E,iLArBX,OACE,kBAAC,IAAD,CAAUnE,MAAOA,GACd,kBAAC,IAAD,KACI,yBAAKkC,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,UAAd,qBAEF,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAakC,QAAS,KAAMlE,UAAWA,GACrC,kBAAC,IAAD,CAAOmE,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,aAAaC,UAAWhE,a,GAdrCoC,aCJlB6B,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.6064fdc6.chunk.js","sourcesContent":["const initialState = []\r\n\r\nconst BlogReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_POST\":\r\n      return state.concat([action.payload]); // add new post in state array\r\n    case \"DELETE_POST\":\r\n      return state.filter(post => post.id !== action.id);\r\n      // keep all the posts that is not equals to id that was dispatched\r\n    case \"UPDATE\":\r\n      return state.map(post => {\r\n        if (post.id === action.id) { \r\n          //get an id and check for a match in the array of posts then update that post which was matched\r\n          return {\r\n            ...post,\r\n            title: action.payload.title,\r\n            author: action.payload.author,\r\n            message: action.payload.message,\r\n            image: action.payload.image,\r\n          };\r\n        } else return post;\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default BlogReducer;\r\n","import { combineReducers } from 'redux';\r\nimport BlogReducer from './blogReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  blogReducer: BlogReducer // only one reducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import rootReducer from './reducers/rootReducer';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { createStore } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: storage, // Store the data in storage file\r\n  whitelist: ['blogReducer'] // Whitelisting blogReducer to Store in persistedReducer\r\n};\r\n\r\nconst pReducer = persistReducer(persistConfig, rootReducer); // create a persist reducer\r\nconst store = createStore(pReducer); // creating a store to save Posts/Data\r\nconst persistor = persistStore(store);\r\n// creating a persisted Reducer and storing the data that we received inside it to fetch it after page is reloaded\r\n\r\nexport { persistor, store };\r\n","export const addToList = (data) => {\r\n  return {\r\n    type: 'ADD_POST',\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport const updatePost = (id, data) => {\r\n  return {\r\n    type: 'UPDATE',\r\n    id,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport const deletePost = (id) => {\r\n  return {\r\n    type: 'DELETE_POST',\r\n    id\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { updatePost } from \"../../store/actions/actionType\";\r\n\r\nclass EditPage extends Component {\r\n  state = {\r\n    isDataExist: false,\r\n    file: '',\r\n    imageUrl: '',\r\n    updated: '',\r\n    title: '',\r\n    author: '',\r\n    message: ''\r\n  }\r\n\r\n  componentDidMount(){\r\n    if (!this.props.location.data) {\r\n       this.props.history.push(\"/\"); // Redirect the from edit page to home page if data doesn't exist\r\n    }else{\r\n       const { post } = this.props.location.data;\r\n       this.setState({\r\n         isDataExist: true,\r\n         imageUrl: post.image,\r\n         title: post.title,\r\n         author: post.author,\r\n         message: post.message\r\n       });\r\n    }\r\n  }\r\n\r\n  getImage = e => {\r\n     e.preventDefault();\r\n     // Running FileReader to format the image that was uploaded and then adding it in the state\r\n     let reader = new FileReader();\r\n     let file = e.target.files[0];\r\n\r\n     reader.onloadend = () => {\r\n       this.setState({\r\n         file: file,\r\n         imageUrl: reader.result\r\n       });\r\n     }\r\n     reader.readAsDataURL(file)\r\n  }\r\n\r\n  handleValues = e => {\r\n    // get each value of each input and store it in the state\r\n    this.setState({[e.target.id]: e.target.value});\r\n  }\r\n\r\n  handleEdit = e => {\r\n    e.preventDefault();\r\n\r\n    const data = {\r\n      id: new Date(),\r\n      title: this.state.title,\r\n      author: this.state.author,\r\n      message: this.state.message,\r\n      image: this.state.imageUrl\r\n    };\r\n\r\n    //dipatch updatePost function that will update with new post\r\n    this.props.dispatch(updatePost(this.props.location.data.id, data));\r\n    this.setState({\r\n      updated: 'Post was updated',\r\n      title: '',\r\n      author: '',\r\n      message: '',\r\n      imageUrl: ''\r\n    });\r\n    this.removeImage.value = null;\r\n  };\r\n\r\n  render() {\r\n    const editSelectedPost = () => {\r\n       if(this.state.isDataExist){\r\n        return <div key={this.props.location.data.id} className=\"edit_post\">\r\n           <div className=\"edit_page_upper_text\">\r\n             <Link to=\"/\" className=\"back_btn\">Back</Link>\r\n             <h5>{this.state.updated}</h5>\r\n           </div>\r\n           <form className=\"form\" onSubmit={this.handleEdit}>\r\n             <input\r\n               required\r\n               type=\"text\"\r\n               id=\"title\"\r\n               onChange={this.handleValues}\r\n               placeholder=\"Enter Post Title\"\r\n               value={this.state.title}\r\n             />\r\n             <br />\r\n               <input\r\n                 required\r\n                 type=\"text\"\r\n                 id=\"author\"\r\n                 onChange={this.handleValues}\r\n                 placeholder=\"Enter Author Name\"\r\n                 value={this.state.author}\r\n               />\r\n             <br />\r\n             <textarea\r\n               required\r\n               rows=\"5\"\r\n               id=\"message\"\r\n               onChange={this.handleValues}\r\n               cols=\"28\"\r\n               placeholder=\"Enter Post\"\r\n               value={this.state.message}\r\n             />\r\n             <br />\r\n             <input\r\n               required\r\n               type=\"file\"\r\n               ref={image => (this.removeImage = image)}\r\n               onChange={e => this.getImage(e)}\r\n               />\r\n             <br />\r\n             <button>Update</button>\r\n           </form>\r\n         </div>\r\n      }else{\r\n         return <h3>No Post To Edit</h3>\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        {editSelectedPost()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(EditPage);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addToList } from \"../../store/actions/actionType\";\r\n\r\nclass PostForm extends Component{\r\n  state = {\r\n    file: '',\r\n    imageUrl: '',\r\n    newPost: '',\r\n    title: '',\r\n    author: '',\r\n    message: '',\r\n  }\r\n\r\n  getImage = e => {\r\n    e.preventDefault();\r\n    // Running FileReader to format the image that was uploaded and then adding it in the state\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        file: file,\r\n        imageUrl: reader.result,\r\n      });\r\n    }\r\n    reader.readAsDataURL(file)\r\n  }\r\n\r\n  handleValues = e => {\r\n    // get each value of each input and store it in the state\r\n    this.setState({[e.target.id]: e.target.value});\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const data = {\r\n      id: new Date(),\r\n      title: this.state.title,\r\n      author: this.state.author,\r\n      message: this.state.message,\r\n      image: this.state.imageUrl\r\n    }\r\n\r\n    this.props.dispatch(addToList(data)) //dipatch addToList function that will create a new post\r\n    this.setState({ // clear the inputs after post is added to list\r\n      newPost: \"New Post Added In The List\",\r\n      imageUrl: '',\r\n      title: '',\r\n      author: '',\r\n      message: ''\r\n    });\r\n    this.removeImage.value = null;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"post-form-container\">\r\n        <h5 className=\"new_post-alert\">{this.state.newPost}</h5>\r\n        <h1 className=\"post_heading\">Create Post</h1>\r\n        <form className=\"form\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            id=\"title\"\r\n            onChange={this.handleValues}\r\n            placeholder=\"Enter Post Title\"\r\n            value={this.state.title}\r\n          />\r\n          <br />\r\n            <input\r\n              required\r\n              type=\"text\"\r\n              id=\"author\"\r\n              onChange={this.handleValues}\r\n              placeholder=\"Enter Author Name\"\r\n              value={this.state.author}\r\n            />\r\n          <br />\r\n          <textarea\r\n            required\r\n            rows=\"5\"\r\n            id=\"message\"\r\n            onChange={this.handleValues}\r\n            cols=\"28\"\r\n            placeholder=\"Enter Post\"\r\n            value={this.state.message}\r\n          />\r\n          <br />\r\n          <input\r\n            required\r\n            type=\"file\"\r\n            id=\"image\"\r\n            ref={image => (this.removeImage = image)}\r\n            onChange={e => this.getImage(e)}\r\n            />\r\n          <br />\r\n          <button>Post</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(PostForm);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { deletePost } from \"../../../store/actions/actionType\";\r\n\r\nclass Post extends Component {\r\n  state = {\r\n    img: null,\r\n    day: null,\r\n    month: null,\r\n    year: null\r\n  };\r\n\r\n  componentDidMount(){\r\n    try{\r\n      // date formating and storing it the state\r\n      const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n      ];\r\n      let d = new Date(this.props.post.id);\r\n      this.setState({day: d.getDate(), month: month[d.getMonth()], year: d.getFullYear()});\r\n    }catch(e){\r\n      console.log('ERROR', e)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"post\">\r\n        <img alt=\"post_img\" className=\"post_img\" src={this.props.post.image}/>\r\n        <div className=\"date_n_author_wrapper\">\r\n          <p className=\"post_date\">{`${this.state.month} ${this.state.day} ${this.state.year}`}</p>\r\n          <p className=\"post_author\">Posted by <span>{this.props.post.author}</span></p>\r\n        </div>\r\n        <h1 className=\"post_title\">{this.props.post.title}</h1>\r\n        <p className=\"post_message\">{this.props.post.message}</p>\r\n        <div className=\"buttons_wrapper\">\r\n          <Link className=\"edit\" to={{pathname: '/edit-post', data:{post: this.props.post, id: this.props.post.id } }}>Edit</Link>\r\n          <button className=\"delete\" onClick={() => this.props.dispatch(deletePost(this.props.post.id))}\r\n          >Delete</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(Post);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Post from \"./single-post/post\";\r\n\r\nclass AllPost extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"post-container\">\r\n        {this.props.posts.blogReducer.length === 0 ?\r\n         <div>\r\n            <h1 className=\"no_post_heading\">No Post in the Database </h1>\r\n         </div>\r\n        : this.props.posts.blogReducer.map(post => (\r\n          post === null ? null\r\n          : <div key={post.id}>\r\n              <Post post={post}/>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => { // fetch all stored Posts/Data from Redux\r\n  return {\r\n    posts: state\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AllPost);\r\n","import React, { Component } from \"react\";\r\nimport PostForm from \"./homePageComponents/postForm\";\r\nimport AllPost from \"./homePageComponents/allPost\";\r\n\r\nclass BlogPostWrapper extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-post-container\">\r\n        <PostForm />\r\n        <AllPost />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlogPostWrapper;\r\n","import './App.css';\nimport React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport {persistor, store} from './store/store';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport EditPage from './components/editPageComponents/edit';\nimport BlogPostWrapper from './components/blogPostWrapper';\nimport { PersistGate } from 'redux-persist/integration/react'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>{/* Provider will send stored data to every component connected to Redux in this App*/}\n         <Router>\n             <div className=\"App\">\n               <div className=\"navbar\">\n                 <h2 className=\"center\">REACT REDUX BLOG</h2>\n               </div>\n               <Switch>\n                 {/* PersistGate waits untill the data is fetch then the persistor will get the\n                   stored Posts/Data that was stored in the storage and provide it to us */}\n                 <PersistGate loading={null} persistor={persistor}>\n                   <Route exact path=\"/\" component={BlogPostWrapper} />\n                   <Route path=\"/edit-post\" component={EditPage} />\n                 </PersistGate>\n               </Switch>\n             </div>\n         </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />,document.getElementById(\"root\"));\n"],"sourceRoot":""}